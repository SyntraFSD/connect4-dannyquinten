{"version":3,"sources":["../../src/js/connect4.js"],"names":["mainElement","document","querySelector","colors","empty","red","yellow","state","turn","board","winner","full","generateBoardHtml","reduce","colsHtml","col","colIndex","colHtml","rowsHtml","row","rowIndex","drawBoard","htmlElement","innerHTML","boardElement","createElement","id","dataset","appendChild","initGameState","resetGame","indexOfFirstEmptySquare","squareArray","i","length","fullBoard","fullCol","changeTurn","boardDraw","dropStone","event","target","matches","clickedHtmlCol","closest","parseInt","index","addEventListener"],"mappings":"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","sourcesContent":["// html elements\nconst mainElement = document.querySelector('.board');\n\n// colors object\nconst colors = {\n  empty: 'empty',\n  red: 'red',\n  yellow: 'yellow',\n};\n\nconst state = {\n  turn: colors.yellow,\n  board: [\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n  ],\n  winner: false,\n  full: false,\n};\nfunction generateBoardHtml(board) {\n  return board.reduce((colsHtml, col, colIndex) => {\n    let colHtml = '<div class=\"col\" data-index=\"' + colIndex + '\">';\n    colHtml += col.reduce((rowsHtml, row, rowIndex) => {\n      return '<div class=\"row\" data-color=\"' + row + '\" data-winner=\"false\"></div>' + rowsHtml;\n    }, '');\n    colHtml += '</div>';\n    return colsHtml + colHtml;\n  }, '');\n}\nfunction drawBoard(board, turn, htmlElement) {\n  htmlElement.innerHTML = '';\n  const boardElement = document.createElement('div');\n  boardElement.id = 'board';\n  boardElement.dataset.turn = turn;\n  boardElement.innerHTML = generateBoardHtml(board);\n\n  // Made the same function with foreach\n  // board.forEach((col, colIndex) => {\n  //   const colElement = document.createElement('div');\n  //   colElement.classList.add('col');\n  //   colElement.dataset.index = colIndex;\n  //   col.forEach((row, rowIndex) => {\n  //     const rowElement = document.createElement('div');\n  //     rowElement.classList.add('row');\n  //     rowElement.dataset.color = colors.empty;\n  //     if (colIndex%2 === 1) {\n  //       rowElement.dataset.color = colors.red;\n  //     } else if (rowIndex === 2 || rowIndex === 3) {\n  //       rowElement.dataset.color = colors.yellow;\n  //     }\n  //     rowElement.dataset.winner = 'false';\n  //     colElement.appendChild(rowElement);\n  //   });\n  //   boardElement.appendChild(colElement);\n  // });\n  htmlElement.appendChild(boardElement);\n\n  return boardElement;\n}\n//  initial state of the game\nfunction initGameState() {\n  state.turn = colors.yellow;\n  state.board = [\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n  ];\n  state.winner = false;\n  state.full = false;\n}\n//  reset function, used if the board is full or you won the game\nfunction resetGame() {\n  initGameState();\n  drawBoard(state.board, state.turn, mainElement);\n}\nfunction indexOfFirstEmptySquare(squareArray) {\n  for (let i = 0; i < squareArray.length; i++) {\n    if (squareArray[i] === colors.empty) {\n      return i;\n    }\n  }\n  return false;\n}\nfunction fullBoard() {\n  state.full = state.board.reduce((full, col) => {\n    if (full) {\n      return col.reduce((fullCol, row) => {\n        if (row === colors.empty) {\n          fullCol = false;\n        }\n        return fullCol;\n      }, true);\n    }\n    return full;\n  }, true);\n}\n\nfunction changeTurn() {\n  if (state.turn === colors.yellow) {\n    state.turn = colors.red;\n  } else {\n    state.turn = colors.yellow;\n  }\n  boardDraw.dataset.turn = state.turn;\n}\n\nfunction dropStone(event) {\n  if (event.target.matches('.row,.col')) {\n    const clickedHtmlCol = event.target.closest('.col');\n    const colIndex = parseInt(clickedHtmlCol.dataset.index);\n    const rowIndex = indexOfFirstEmptySquare(state.board[colIndex]);\n    fullBoard();\n    if (state.full) {\n      resetGame();\n    } else if (rowIndex !== false) {\n      state.board[colIndex][rowIndex] = state.turn;\n      changeTurn();\n      drawBoard(state.board, state.turn, mainElement);\n    }\n  }\n}\ninitGameState();\nlet boardDraw = drawBoard(state.board, state.turn, mainElement);\nmainElement.addEventListener('click', dropStone);\n"],"file":"connect4.js"}